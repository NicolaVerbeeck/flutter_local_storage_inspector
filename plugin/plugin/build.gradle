plugins {
    id 'org.jetbrains.intellij' version '1.5.2'
    id 'org.jetbrains.kotlin.jvm' version '1.6.20'
    id "dev.bmac.intellij.plugin-uploader" version "1.2.2"
}

apply from: '../dependencies.gradle'

group 'com.chimerapps.tools'
version '0.3.1'

repositories {
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

tasks.compileJava {
    options.release.set(11)
}

configurations {
    patch
    [implementation]*.exclude module: 'gson'
}

dependencies {
    implementation project.files("lib/gson-2.9.0.patched.jar")

    patch('com.google.code.gson:gson:2.9.0')
    patch('com.googlecode.jarjar:jarjar:1.3')

    deps.pluginCompile.each { name, dep ->
        implementation(dep) {
            exclude group: 'org.slf4j', module: 'slf4j-api'
        }
    }
}

configurations.each {
    c ->
        c.resolutionStrategy.dependencySubstitution {
            all { DependencySubstitution dependency ->
                if (dependency.requested.group == 'app.cash.sqldelight') {
                    dependency.useTarget("com.github.NicolaVerbeeck.sqldelight:${dependency.requested.module}:${dependency.requested.version}")
                }
            }
        }
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version = versions.minIntelliJ
    updateSinceUntilBuild = false
    plugins = ["dart:211.7811", "io.flutter:65.2.2"]
}
runPluginVerifier {
    ideVersions = ["212.5457.46"]
}
patchPluginXml {
    changeNotes = file('change-notes.txt').text
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

task downloadPatchLibs(type: Copy) {
    into('lib')
    from(configurations.patch)
    exclude('jarjar*')
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

task applyPatch(dependsOn: 'downloadPatchLibs') {
    doLast {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.patch.asPath
            jarjar(jarfile: 'lib/gson-2.9.0.patched.jar', filesetmanifest: "merge") {
                zipfileset(src: 'lib/gson-2.9.0.jar')
                rule pattern: "com.google.gson.**", result: "com.google.gsonpackaged.@1"
            }
        }
    }
}

task cleanupDownloadPatchLibs(type: Delete, dependsOn: 'applyPatch') {
    delete 'lib/gson-2.9.0.jar'
}

task maybePatch {
    if (new File('lib/gson-2.9.0.patched.jar').exists()) return
    dependsOn applyPatch
    dependsOn cleanupDownloadPatchLibs
}
compileKotlin.dependsOn(maybePatch)

task cleanPatch(type: Delete) {
    delete 'lib'
}
clean.dependsOn(cleanPatch)

tasks.create("buildTranslationsEnum") {
    doLast {
        def translationProperties = new Properties()
        translationProperties.load(project.rootProject.file("src/main/resources/translations/translations.properties").newInputStream())

        def file = project.rootProject.file("src/main/kotlin/com/chimerapps/storageinspector/ui/util/localization/Tr.kt")
        file.write "package com.chimerapps.storageinspector.ui.util.localization\n\n"
        file << "enum class Tr(val key: String) {\n"
        def sorted = new TreeSet<String>()
        translationProperties.propertyNames().each {
            sorted.add(it.toString())
        }
        def c = 0
        sorted.each { string ->
            def parts = string.split('\\.')
            def str = ""
            for (int i = 1; i < parts.length; ++i) {
                str += parts[i].capitalize()
            }
            file << "    $str(\"$string\")${(++c == sorted.size()) ? ";" : ","} //${translationProperties.getProperty(string).replaceAll("\n", "\\\\n")}\n"
        }
        file << "\n    fun tr(vararg arguments: Any) : String {\n"
        file << "        val raw = Localization.getString(key)\n"
        file << "        if (arguments.isEmpty()) return raw\n"
        file << "        return String.format(raw, *arguments)\n"
        file << "    }\n"
        file << "}"
    }
}

signPlugin {
    certificateChain = new File(System.getenv("STORAGE_PLUGIN_CERTIFICATE_CHAIN")).text
    privateKey = new File(System.getenv("STORAGE_PLUGIN_PRIVATE_KEY")).text
    password = System.getenv("STORAGE_PLUGIN_PRIVATE_KEY_PASSWORD")
}

publishPlugin {
    token = System.getenv("STORAGE_PLUGIN_PUBLISH_TOKEN")
}

uploadPlugin {
    dependsOn(project.tasks.named('signPlugin'))
    def signPluginTask = project.tasks.named("signPlugin").get()
    def archive = signPluginTask.outputArchiveFile.asFile

    def publishToken = System.getenv("PLUGIN_UPLOAD_TOKEN")

    pluginName.set('Local Storage Inspector')
    file.set(archive.get())
    pluginId.set('com.chimerapps.tools.storage-inspector-plugin')
    version.set(project.version)
    pluginDescription.set(file('plugin_description.txt').text)
    changeNotes.set(file('change-notes.txt').text)
    sinceBuild.set("203")

    url.set(System.getenv("PLUGIN_UPLOAD_PATH"))
    authentication.set("Bearer $publishToken")
}